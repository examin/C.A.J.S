# -*- coding: utf-8 -*-
import scrapy
import logging
import utils.OutputFormat as out
import utils.args as args
import pandas as pd
from pandas import ExcelWriter
import Notify.sendEmails as ce
import utils.OutputFormat as out
import utils.args as args


class OpensslSpider(scrapy.Spider):
    name = 'OpenSSL'
    allowed_domains = ['www.openssl.org/news/vulnerabilities-1.0.2.html']
    start_urls = ['https://www.openssl.org/news/vulnerabilities-1.0.2.html']

    @classmethod
    def parse(self, response):
        impact_Rating = response.xpath('//dl/dt/a[3]').re('.*?\#(.*)?"')
        cve_Id = response.xpath(
            '//dt/a[contains(text(), "CVE-")]/text()').extract()
        advisory = response.xpath(
            '//*[@id="content"]/div/article/div/dl/dd/text()').extract()
        affected = response.xpath('//dd/ul/li[contains(text(),"1.0.2")]').re(
            '.*?ted(.*?)?\)')
        fixed_in_OpenSSL = response.xpath(
            '//dd/ul/li[contains(text(),"1.0.2")]').re('.*?L(.*?)?[\<|\(]')
        fixed_link = response.xpath(
            '//dl/dd/ul/li/a[contains(text(),"git")]/@href').extract()

        # to check if already exist
        arg = args.argparsed
        name = OpensslSpider.name
        url = OpensslSpider.start_urls
        changed = ce.do_need_notify(name, 'Output/' + name + '.csv', cve_Id,
                                    advisory[0], url)
        try:
            data = {
                'Impact Rating': impact_Rating,
                'Advisory': advisory,
                "CVE-Id": cve_Id,
                "Versions Affected": affected,
                'Fixed in OpenSSL': fixed_in_OpenSSL
            }
            add = {'fixed_link': fixed_link}
            df = pd.DataFrame(
                data,
                columns=[
                    "Impact Rating",
                    "CVE-Id",
                    "Advisory",
                    "Versions Affected",
                    "Fixed in OpenSSL",
                ])
            additional = pd.DataFrame(add, columns=['fixed_link'])
            if changed is True:
                out.outputAs(name, df)
            # if aditional data output format required
            additional_output_as = arg.output_as
            if additional_output_as != False:
                custom_output(additional_output_as, name, df)

        except Exception as e:
            print("type error: " + name + " " + str(e))
