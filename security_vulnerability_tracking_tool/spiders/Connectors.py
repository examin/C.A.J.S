import logging

import pandas as pd
from pandas import ExcelWriter

import Notify.sendEmails as ce
import scrapy
import utils.args as args
import utils.OutputFormat as out


class ConnectersSpider(scrapy.Spider):
    name = 'Connectors'
    allowed_domains = ['tomcat.apache.org/security-jk.html']
    start_urls = ['https://tomcat.apache.org/security-jk.html']

    @classmethod
    def parse(self, response):
        impact_Rating = response.xpath(
            '//*[@id="content"]/div/p/strong/text()').re('^[LIMC]')
        advisory = response.xpath('//*[@id="content"]/div/p/strong/text()'
                                  ).re(' .*')
        # not multiline add it later re.MULTILINE
        cve_Id = response.xpath(
            '//*[@id="content"]/div/p[1]/a[contains(text(),"CVE")]/text()'
        ).extract()
        versions_Affected = response.xpath(
            '//p[contains(text(),"Affects")]/text()[1]').re(' .*')
        arg = args.argparsed
        modified_Impact_name = []
        for item in impact_Rating:
            if item == 'L':
                item = 'low'
            if item == 'I':
                item = 'important'
            if item == 'M':
                item = 'moderate'
            if item == 'C':
                item = 'critical'
            modified_Impact_name.append(item)
        impact_Rating = modified_Impact_name

        # to check if already exist
        name = ConnectersSpider.name
        url = ConnectersSpider.start_urls
        changed = ce.do_need_notify(name, "Output/" + name + '.csv', cve_Id,
                                    advisory[0], url)
        try:
            data = {
                'impact_Rating': impact_Rating,
                'Advisory': advisory,
                "CVE-Id": cve_Id,
                "versions_Affected": versions_Affected
            }
            df = pd.DataFrame(
                data,
                columns=[
                    'impact_Rating', "CVE-Id", 'Advisory',
                    "versions_Affected"
                ])
            if changed is True:
                out.outputAs(name, df)

            # if aditional data output format required
            additional_output_as = arg.output_as
            if additional_output_as != False:
                out.custom_output(additional_output_as, name, df)

        except Exception as e:
            print("type error: " + name + " " + str(e))
