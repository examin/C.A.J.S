# -*- coding: utf-8 -*-
import logging

import pandas as pd
from pandas import ExcelWriter

import Notify.sendEmails as ce
import scrapy
import utils.args as args
import utils.OutputFormat as out


class Tomcat7Spider(scrapy.Spider):
    name = 'Tomcat_7'
    allowed_domains = ['tomcat.apache.org/security-7.html']
    start_urls = ['https://tomcat.apache.org/security-7.html']

    @classmethod
    def parse(self, response):

        advisory = response.xpath(
            '//*[@id="content"]/div/p/a/preceding-sibling::strong/text()'
        ).extract()
        impact_rating = []
        cve_id = response.xpath(
            '//div/p/strong/following-sibling::a/text()').extract()
        header = response.xpath('//div/h3/@id').extract()
        versions_affected = []
        arg = args.argparsed
        for x in range(2, len(header)):
            # //*[@id="Fixed_in_Apache_Tomcat_9.0.5"]/following-sibling::div[1]/p[contains(text(),"Affects")]
            # cveid_numof = //*[@id="Fixed_in_Apache_Tomcat_9.0.5"]/following-sibling::div[1]/p/strong/following-sibling::a/text()
            cve_path = '(//*[@id="'
            a_path = '(//*[@id="'
            cve_path += header[x]
            a_path += header[x]
            a_path += '"]/following-sibling::div[1]/p[contains(text(),"Affect")]/text())'
            cve_path += '"]/following-sibling::div[1]/p/strong/following-sibling::a/text())'
            a_path = response.xpath(a_path).extract()
            cve_path = response.xpath(cve_path).extract()
            if len(a_path) == len(cve_path):
                for j in enumerate(a_path):
                    versions_affected.append(j[1])
            else:
                if len(cve_path) == 1:
                    versions_affected.append("null")
                else:
                    # //*[@id="content"]/div[44]/p[./a="CVE-2012-5568"]/preceding-sibling::p[1]/text()
                    for k in range(len(cve_path) - 1):
                        a_path = '(//*[@id="content"]/div/p[./a="'
                        a_path += cve_path[k]
                        a_path += '"]/preceding-sibling::p[1][contains(text(),"Affects")]/text())'
                        a_path = response.xpath(a_path).extract()
                        if (len(a_path) != 0):
                            versions_affected.append(a_path[0])
                        else:
                            versions_affected.append("null")
                    # (//*[@id="content"]/div/p[./a="CVE-2014-0160"]/following-sibling::p[contains(text(),"Affects")]/text())
                    a_path = '(//*[@id="content"]/div/p[./a="'
                    a_path += cve_path[k]
                    a_path += '"]/following-sibling::p[contains(text(),"Affects")]/text())'
                    a_path = response.xpath(a_path).extract()
                    if (len(a_path) != 0):
                        versions_affected.append(a_path[0])
                    else:
                        versions_affected.append("null")

        modified_Impact_name = []
        for item in advisory:
            temp = ''
            if item.startswith('Low'):
                temp = 'Low'
            elif item.startswith('Moderate'):
                temp = 'Moderate'
            elif item.startswith('Important'):
                temp = 'Important'
            elif item.startswith('Critical'):
                temp = 'Critical'
            else:
                temp = 'n/a'
            modified_Impact_name.append(temp)
        impact_rating = modified_Impact_name

        # to check if already exist
        name = Tomcat7Spider.name
        url = Tomcat7Spider.start_urls
        changed = ce.do_need_notify(name, "Output/" + name + '.csv', cve_id, versions_affected,
                                    advisory, url)
        try:
            data = {
                'impact_rating': impact_rating,
                'Advisory': advisory,
                "CVE-Id": cve_id,
                "versions_Affected": versions_affected
            }
            df = pd.DataFrame(
                data,
                columns=[
                    'impact_rating', 'CVE-Id', 'Advisory',
                    'versions_Affected'
                ])
            if changed is True:
                out.outputAs(name, df)

            # if aditional data output format required
            additional_output_as = arg.output_as
            if additional_output_as != False:
                out.custom_output(additional_output_as, name, df)

        except Exception as e:
            print("type error: " + name + " " + str(e))
