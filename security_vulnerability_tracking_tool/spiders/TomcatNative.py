# -*- coding: utf-8 -*-
import scrapy
import logging
import pandas as pd
from pandas import ExcelWriter
import Notify.sendEmails as ce


class TomcatnativeSpider(scrapy.Spider):
    name = 'TomcatNative'
    allowed_domains = ['//tomcat.apache.org/security-native.html']
    start_urls = ['https://tomcat.apache.org/security-native.html']

    @classmethod
    def parse(self, response):

        advisory = response.xpath(
            '//*[@id="content"]/div/p/a/preceding-sibling::strong/text()'
        ).extract()
        impact_Rating = []
        cve_Id = response.xpath(
            '//div/p/strong/following-sibling::a/text()').extract()
        hedder = response.xpath('//div/h3/@id').extract()
        affected = []
        for x in range(2, len(hedder)):
            #//*[@id="Fixed_in_Apache_Tomcat_9.0.5"]/following-sibling::div[1]/p[contains(text(),"Affects")]
            # cveid_numof = //*[@id="Fixed_in_Apache_Tomcat_9.0.5"]/following-sibling::div[1]/p/strong/following-sibling::a/text()
            cve_path = '(//*[@id="'
            a_path = '(//*[@id="'
            cve_path += hedder[x]
            a_path += hedder[x]
            a_path += '"]/following-sibling::div[1]/p[contains(text(),"Affect")]/text())'
            cve_path += '"]/following-sibling::div[1]/p/strong/following-sibling::a/text())'
            a_path = response.xpath(a_path).extract()
            cve_path = response.xpath(cve_path).extract()
            if len(a_path) == len(cve_path):
                for j in enumerate(a_path):
                    affected.append(j[1])
            else:
                if len(cve_path) == 1:
                    affected.append("null")
                else:
                    #//*[@id="content"]/div[44]/p[./a="CVE-2012-5568"]/preceding-sibling::p[1]/text()
                    for k in range(len(cve_path) - 1):
                        a_path = '(//*[@id="content"]/div/p[./a="'
                        a_path += cve_path[k]
                        a_path += '"]/preceding-sibling::p[1][contains(text(),"Affects")]/text())'
                        a_path = response.xpath(a_path).extract()
                        if (len(a_path) != 0):
                            affected.append(a_path[0])
                        else:
                            affected.append("null")
                    #(//*[@id="content"]/div/p[./a="CVE-2014-0160"]/following-sibling::p[contains(text(),"Affects")]/text())
                    a_path = '(//*[@id="content"]/div/p[./a="'
                    a_path += cve_path[k]
                    a_path += '"]/following-sibling::p[contains(text(),"Affects")]/text())'
                    a_path = response.xpath(a_path).extract()
                    if (len(a_path) != 0):
                        affected.append(a_path[0])
                    else:
                        affected.append("null")

        modified_Impact_name = []
        for item in advisory:
            temp = ''
            if item.startswith('Low'):
                temp = 'Low'
            elif item.startswith('Moderate'):
                temp = 'Moderate'
            elif item.startswith('Important'):
                temp = 'Important'
            elif item.startswith('Critical'):
                temp = 'Critical'
            else:
                temp = 'n/a'
            modified_Impact_name.append(temp)
        impact_Rating = modified_Impact_name

        #to check if already exist
        name = TomcatnativeSpider.name
        url = TomcatnativeSpider.start_urls
        changed = ce.do_need_notify(name, 'Output/' + name + '.xlsx', cve_Id,
                                    advisory[0], url)
        if changed is True:
            try:
                data = {
                    'impact_Rating': impact_Rating,
                    'Advisory': advisory,
                    "CVE-Id": cve_Id,
                    "versions_Affected": affected
                }
                df = pd.DataFrame(
                    data,
                    columns=[
                        'impact_Rating', 'CVE-Id', 'Advisory',
                        'versions_Affected'
                    ])
                writer = ExcelWriter("Output/TomcatNative" +".xlsx")
                logging.info(name+" Data Updated")
                df.to_excel(writer, 'CVE Details', index=False)
                writer.save()

            except Exception as e:
                print("type error: " + str(e))
        else:
            logging.info(name+" have No new cve")
