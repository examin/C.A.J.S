# -*- coding: utf-8 -*-
import scrapy
import utils.OutputFormat as out
import utils.args as args
import pandas as pd
from pandas import ExcelWriter
import utils.OutputFormat as out
import utils.args as args
import Notify.sendEmails as ce


class CurlSpider(scrapy.Spider):
    name = 'Curl'
    allowed_domains = ['curl.haxx.se/docs/security.html']
    start_urls = ['https://curl.haxx.se/docs/security.html']

    @classmethod
    def parse(self, response):
        date = response.xpath('//tr/td[3]/text()').extract()
        advisory = response.xpath('//tr/td[2]/a/text()').extract()
        cve_Id = response.xpath('//tr/td[6]//text()').extract()
        versions_Affected = response.xpath('//tr/td[4]/a/text()').extract()
        versions_Affected2 = response.xpath('//tr/td[5]/a/text()').extract()
        cwe = response.xpath('//tr/td[7]/a/text()').extract()

        # to check if already exist
        arg = args.argparsed
        name = CurlSpider.name
        url = CurlSpider.start_urls
        changed = ce.do_need_notify(name, "Output/" + name + '.csv', cve_Id,
                                    advisory[0], url)
        try:
            data = {
                "Date": date,
                "Advisory": advisory,
                "CVE-Id": cve_Id,
                "Versions_Affected": versions_Affected,
                "Affected_upto": versions_Affected2,
                "Cwe": cwe
            }
            df = pd.DataFrame(
                data,
                columns=[
                    "CVE-Id", "Advisory", "Date", "Versions_Affected",
                    "Affected_upto"
                ])
            if changed is True:
                out.outputAs(name, df)
            # if aditional data output format required
            additional_output_as = arg.output_as
            if additional_output_as != False:
                custom_output(additional_output_as, name, df)

        except Exception as e:
            print("type error: " + name + " " + str(e))
